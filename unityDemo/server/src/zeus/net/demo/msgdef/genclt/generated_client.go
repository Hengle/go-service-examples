package genclt

// Code generated by gen. Do not edit!
// 代码由 gen 生成。不要手工编辑！

import (
	"zeus/net/client"
	"zeus/net/demo/msgdef/genclt/internal"
	"zeus/net/demo/msgdef/genclt/proc"
	"zeus/net/msg2id"
)

type IMsg = client.IMsg

// 封装 client.Session, 并添加MsgProc。
type Session struct {
	*client.Session

	Proc_hello *proc.Proc_hello
}

// Dial 创建一个连接.
// 使用 genclt.Dial() 创建连接，可在 Start() 之前更改消息处理器。
func Dial(protocal string, addr string) (*Session, error) {
	sess, err := client.Dial(protocal, addr)
	if err != nil {
		return nil, err
	}

	result := &Session{
		Session: sess,

		Proc_hello: &proc.Proc_hello{},
	}

	return result, nil
}

func (s *Session) Start() {
	// 消息到ID的映射，用于发送消息
	m := msg2id.New()
	internal.RegMsg2ID_hello(m)

	s.SetMsg2ID(m) // 设置到会话

	// 注册消息处理函数
	internal.RegProc_hello(s.Session, s.Proc_hello)

	// 开始会话收发协程
	s.Session.Start()
}
